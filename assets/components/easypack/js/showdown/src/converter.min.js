
showdown.Converter=function(converterOptions){'use strict';var
options={},langExtensions=[],outputModifiers=[],listeners={},setConvFlavor=setFlavor,metadata={parsed:{},raw:'',format:''};_constructor();function _constructor(){converterOptions=converterOptions||{};for(var gOpt in globalOptions){if(globalOptions.hasOwnProperty(gOpt)){options[gOpt]=globalOptions[gOpt];}}
if(typeof converterOptions==='object'){for(var opt in converterOptions){if(converterOptions.hasOwnProperty(opt)){options[opt]=converterOptions[opt];}}}else{throw Error('Converter expects the passed parameter to be an object, but '+typeof converterOptions+' was passed instead.');}
if(options.extensions){showdown.helper.forEach(options.extensions,_parseExtension);}}
function _parseExtension(ext,name){name=name||null;if(showdown.helper.isString(ext)){ext=showdown.helper.stdExtName(ext);name=ext;if(showdown.extensions[ext]){console.warn('DEPRECATION WARNING: '+ext+' is an old extension that uses a deprecated loading method.'+'Please inform the developer that the extension should be updated!');legacyExtensionLoading(showdown.extensions[ext],ext);return;}else if(!showdown.helper.isUndefined(extensions[ext])){ext=extensions[ext];}else{throw Error('Extension "'+ext+'" could not be loaded. It was either not found or is not a valid extension.');}}
if(typeof ext==='function'){ext=ext();}
if(!showdown.helper.isArray(ext)){ext=[ext];}
var validExt=validate(ext,name);if(!validExt.valid){throw Error(validExt.error);}
for(var i=0;i<ext.length;++i){switch(ext[i].type){case'lang':langExtensions.push(ext[i]);break;case'output':outputModifiers.push(ext[i]);break;}
if(ext[i].hasOwnProperty('listeners')){for(var ln in ext[i].listeners){if(ext[i].listeners.hasOwnProperty(ln)){listen(ln,ext[i].listeners[ln]);}}}}}
function legacyExtensionLoading(ext,name){if(typeof ext==='function'){ext=ext(new showdown.Converter());}
if(!showdown.helper.isArray(ext)){ext=[ext];}
var valid=validate(ext,name);if(!valid.valid){throw Error(valid.error);}
for(var i=0;i<ext.length;++i){switch(ext[i].type){case'lang':langExtensions.push(ext[i]);break;case'output':outputModifiers.push(ext[i]);break;default:throw Error('Extension loader error: Type unrecognized!!!');}}}
function listen(name,callback){if(!showdown.helper.isString(name)){throw Error('Invalid argument in converter.listen() method: name must be a string, but '+typeof name+' given');}
if(typeof callback!=='function'){throw Error('Invalid argument in converter.listen() method: callback must be a function, but '+typeof callback+' given');}
name=name.toLowerCase();if(!listeners.hasOwnProperty(name)){listeners[name]=[];}
listeners[name].push(callback);}
function rTrimInputText(text){var rsp=text.match(/^\s*/)[0].length,rgx=new RegExp('^\\s{0,'+rsp+'}','gm');return text.replace(rgx,'');}
this._dispatch=function dispatch(evtName,text,options,globals,pParams){evtName=evtName.toLowerCase();var params=pParams||{};params.converter=this;params.text=text;params.options=options;params.globals=globals;var event=new showdown.helper.Event(evtName,text,params);if(listeners.hasOwnProperty(evtName)){for(var ei=0;ei<listeners[evtName].length;++ei){var nText=listeners[evtName][ei](event);if(nText&&typeof nText!=='undefined'){event.setText(nText);}}}
return event;};this.listen=function(name,callback){listen(name,callback);return this;};this.makeHtml=function(text){if(!text){return text;}
var globals={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:langExtensions,outputModifiers:outputModifiers,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:'',format:''}};text=text.replace(/¨/g,'¨T');text=text.replace(/\$/g,'¨D');text=text.replace(/\r\n/g,'\n');text=text.replace(/\r/g,'\n');text=text.replace(/\u00A0/g,'&nbsp;');if(options.smartIndentationFix){text=rTrimInputText(text);}
text='\n\n'+text+'\n\n';text=showdown.subParser('makehtml.detab')(text,options,globals);text=text.replace(/^[ \t]+$/mg,'');showdown.helper.forEach(langExtensions,function(ext){text=showdown.subParser('makehtml.runExtension')(ext,text,options,globals);});text=showdown.subParser('makehtml.metadata')(text,options,globals);text=showdown.subParser('makehtml.hashPreCodeTags')(text,options,globals);text=showdown.subParser('makehtml.githubCodeBlocks')(text,options,globals);text=showdown.subParser('makehtml.hashHTMLBlocks')(text,options,globals);text=showdown.subParser('makehtml.hashCodeTags')(text,options,globals);text=showdown.subParser('makehtml.stripLinkDefinitions')(text,options,globals);text=showdown.subParser('makehtml.blockGamut')(text,options,globals);text=showdown.subParser('makehtml.unhashHTMLSpans')(text,options,globals);text=showdown.subParser('makehtml.unescapeSpecialChars')(text,options,globals);text=text.replace(/¨D/g,'$$');text=text.replace(/¨T/g,'¨');text=showdown.subParser('makehtml.completeHTMLDocument')(text,options,globals);showdown.helper.forEach(outputModifiers,function(ext){text=showdown.subParser('makehtml.runExtension')(ext,text,options,globals);});metadata=globals.metadata;return text;};this.makeMarkdown=function(src){src=src.replace(/\r\n/g,'\n');src=src.replace(/\r/g,'\n');src=src.replace(/>[ \t]+</,'>¨NBSP;<');var doc=showdown.helper.document.createElement('div');doc.innerHTML=src;var globals={preList:substitutePreCodeTags(doc)};clean(doc);var nodes=doc.childNodes,mdDoc='';for(var i=0;i<nodes.length;i++){mdDoc+=showdown.subParser('makeMarkdown.node')(nodes[i],globals);}
function clean(node){for(var n=0;n<node.childNodes.length;++n){var child=node.childNodes[n];if(child.nodeType===3){if(!/\S/.test(child.nodeValue)){node.removeChild(child);--n;}else{child.nodeValue=child.nodeValue.split('\n').join(' ');child.nodeValue=child.nodeValue.replace(/(\s)+/g,'$1');}}else if(child.nodeType===1){clean(child);}}}
function substitutePreCodeTags(doc){var pres=doc.querySelectorAll('pre'),presPH=[];for(var i=0;i<pres.length;++i){if(pres[i].childElementCount===1&&pres[i].firstChild.tagName.toLowerCase()==='code'){var content=pres[i].firstChild.innerHTML.trim(),language=pres[i].firstChild.getAttribute('data-language')||'';if(language===''){var classes=pres[i].firstChild.className.split(' ');for(var c=0;c<classes.length;++c){var matches=classes[c].match(/^language-(.+)$/);if(matches!==null){language=matches[1];break;}}}
content=showdown.helper.unescapeHTMLEntities(content);presPH.push(content);pres[i].outerHTML='<precode language="'+language+'" precodenum="'+i.toString()+'"></precode>';}else{presPH.push(pres[i].innerHTML);pres[i].innerHTML='';pres[i].setAttribute('prenum',i.toString());}}
return presPH;}
return mdDoc;};this.setOption=function(key,value){options[key]=value;};this.getOption=function(key){return options[key];};this.getOptions=function(){return options;};this.addExtension=function(extension,name){name=name||null;_parseExtension(extension,name);};this.useExtension=function(extensionName){_parseExtension(extensionName);};this.setFlavor=function(name){if(!flavor.hasOwnProperty(name)){throw Error(name+' flavor was not found');}
var preset=flavor[name];setConvFlavor=name;for(var option in preset){if(preset.hasOwnProperty(option)){options[option]=preset[option];}}};this.getFlavor=function(){return setConvFlavor;};this.removeExtension=function(extension){if(!showdown.helper.isArray(extension)){extension=[extension];}
for(var a=0;a<extension.length;++a){var ext=extension[a];for(var i=0;i<langExtensions.length;++i){if(langExtensions[i]===ext){langExtensions[i].splice(i,1);}}
for(var ii=0;ii<outputModifiers.length;++i){if(outputModifiers[ii]===ext){outputModifiers[ii].splice(i,1);}}}};this.getAllExtensions=function(){return{language:langExtensions,output:outputModifiers};};this.getMetadata=function(raw){if(raw){return metadata.raw;}else{return metadata.parsed;}};this.getMetadataFormat=function(){return metadata.format;};this._setMetadataPair=function(key,value){metadata.parsed[key]=value;};this._setMetadataFormat=function(format){metadata.format=format;};this._setMetadataRaw=function(raw){metadata.raw=raw;};};



