{"version":3,"names":[],"mappings":"","sources":["assets/components/easypack/js/showdown/src/cli/makehtml.cmd.min.js"],"sourcesContent":["\nvar yargs=require('yargs'),fs=require('fs'),Messenger=require('./messenger.js'),showdown=require('../../dist/showdown'),showdownOptions=showdown.getDefaultOptions(false);yargs.reset().usage('Usage: showdown makehtml [options]').example('showdown makehtml -i','Reads from stdin and outputs to stdout').example('showdown makehtml -i foo.md -o bar.html','Reads \\'foo.md\\' and writes to \\'bar.html\\'').example('showdown makehtml -i --flavor=\"github\"','Parses stdin using GFM style').version().alias('v','version').config('c').alias('c','config').help('h').alias('h','help').option('i',{alias:'input',describe:'Input source. Usually a md file. If omitted or empty, reads from stdin',type:'string'}).option('o',{alias:'output',describe:'Output target. Usually a html file. If omitted or empty, writes to stdout',type:'string',default:false}).option('u',{alias:'encoding',describe:'Input encoding',type:'string'}).option('a',{alias:'append',describe:'Append data to output instead of overwriting',type:'string',default:false}).option('e',{alias:'extensions',describe:'Load the specified extensions. Should be valid paths to node compatible extensions',type:'array'}).option('p',{alias:'flavor',describe:'Run with a predetermined flavor of options. Default is vanilla',type:'string'}).option('q',{alias:'quiet',description:'Quiet mode. Only print errors',type:'boolean',default:false}).option('m',{alias:'mute',description:'Mute mode. Does not print anything',type:'boolean',default:false});for(var opt in showdownOptions){if(showdownOptions.hasOwnProperty(opt)){if(showdownOptions[opt].defaultValue===false){showdownOptions[opt].default=null;}else{showdownOptions[opt].default=showdownOptions[opt].defaultValue;}\nyargs.option(opt,showdownOptions[opt]);}}\nfunction run(){'use strict';var argv=yargs.argv,readMode=(!argv.i||argv.i==='')?'stdin':'file',writeMode=(!argv.o||argv.o==='')?'stdout':'file',msgMode=(writeMode==='file')?'stdout':'stderr',messenger=new Messenger(msgMode,argv.q,argv.m),read=(readMode==='stdin')?readFromStdIn:readFromFile,write=(writeMode==='stdout')?writeToStdOut:writeToFile,enc=argv.encoding||'utf8',flavor=argv.p,append=argv.a||false,options=parseOptions(flavor),converter=new showdown.Converter(options),md,html;if(argv.e){messenger.printMsg('Loading extensions');for(var i=0;i<argv.e.length;++i){try{var ext=require(argv.e[i]);converter.addExtension(ext,argv.e[i]);}catch(e){messenger.printError('Could not load extension '+argv.e[i]+'. Reason:');messenger.errorExit(e);}}}\nmessenger.printMsg('...');messenger.printMsg('Reading data from '+readMode+'...');md=read(enc);messenger.printMsg('Parsing markdown...');html=converter.makeHtml(md);messenger.printMsg('Writing data to '+writeMode+'...');write(html,append);messenger.okExit();function parseOptions(flavor){var options={},flavorOpts=showdown.getFlavorOptions(flavor)||{};if(flavor){messenger.printMsg('Loading '+flavor+' flavor.');}\nfor(var opt in argv){if(argv.hasOwnProperty(opt)){if(showdownOptions.hasOwnProperty(opt)&&showdownOptions[opt].default!==null){options[opt]=showdownOptions[opt].default;}\nif(flavorOpts.hasOwnProperty(opt)){options[opt]=flavorOpts[opt];}\nif(showdownOptions.hasOwnProperty(opt)){if(argv[opt]===true){messenger.printMsg('Enabling option '+opt);options[opt]=argv[opt];}else if(argv[opt]===false){options[opt]=argv[opt];}}}}\nreturn options;}\nfunction readFromStdIn(){try{var size=fs.fstatSync(process.stdin.fd).size;return size>0?fs.readSync(process.stdin.fd,size)[0]:'';}catch(e){var err=new Error('Could not read from stdin, reason: '+e.message);messenger.errorExit(err);}}\nfunction readFromFile(encoding){try{return fs.readFileSync(argv.i,encoding);}catch(err){messenger.errorExit(err);}}\nfunction writeToStdOut(html){return process.stdout.write(html);}\nfunction writeToFile(html,append){var write=(append)?fs.appendFileSync:fs.writeFileSync;try{write(argv.o,html);}catch(err){messenger.errorExit(err);}}}\nmodule.exports=exports={run:run};\n\n"],"file":"makehtml.cmd.min.js"}