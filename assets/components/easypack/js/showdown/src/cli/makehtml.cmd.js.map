{"version":3,"names":[],"mappings":"","sources":["assets/components/easypack/js/showdown/src/cli/makehtml.cmd.js"],"sourcesContent":["var yargs = require('yargs'),\n    fs = require('fs'),\n    Messenger = require('./messenger.js'),\n    showdown = require('../../dist/showdown'),\n    showdownOptions = showdown.getDefaultOptions(false);\n\nyargs.reset()\n  .usage('Usage: showdown makehtml [options]')\n  .example('showdown makehtml -i', 'Reads from stdin and outputs to stdout')\n  .example('showdown makehtml -i foo.md -o bar.html', 'Reads \\'foo.md\\' and writes to \\'bar.html\\'')\n  .example('showdown makehtml -i --flavor=\"github\"', 'Parses stdin using GFM style')\n  .version()\n  .alias('v', 'version')\n  .config('c')\n  .alias('c', 'config')\n  .help('h')\n  .alias('h', 'help')\n  .option('i', {\n    alias : 'input',\n    describe: 'Input source. Usually a md file. If omitted or empty, reads from stdin',\n    type: 'string'\n  })\n  .option('o', {\n    alias : 'output',\n    describe: 'Output target. Usually a html file. If omitted or empty, writes to stdout',\n    type: 'string',\n    default: false\n  })\n  .option('u', {\n    alias : 'encoding',\n    describe: 'Input encoding',\n    type: 'string'\n  })\n  .option('a', {\n    alias : 'append',\n    describe: 'Append data to output instead of overwriting',\n    type: 'string',\n    default: false\n  })\n  .option('e', {\n    alias : 'extensions',\n    describe: 'Load the specified extensions. Should be valid paths to node compatible extensions',\n    type: 'array'\n  })\n  .option('p', {\n    alias : 'flavor',\n    describe: 'Run with a predetermined flavor of options. Default is vanilla',\n    type: 'string'\n  })\n  .option('q', {\n    alias: 'quiet',\n    description: 'Quiet mode. Only print errors',\n    type: 'boolean',\n    default: false\n  })\n  .option('m', {\n    alias: 'mute',\n    description: 'Mute mode. Does not print anything',\n    type: 'boolean',\n    default: false\n  });\n\n// load showdown default options\nfor (var opt in showdownOptions) {\n  if (showdownOptions.hasOwnProperty(opt)) {\n    if (showdownOptions[opt].defaultValue === false) {\n      showdownOptions[opt].default = null;\n    } else {\n      showdownOptions[opt].default = showdownOptions[opt].defaultValue;\n    }\n    yargs.option(opt, showdownOptions[opt]);\n  }\n}\n\nfunction run () {\n  'use strict';\n  var argv = yargs.argv,\n      readMode = (!argv.i || argv.i === '') ? 'stdin' : 'file',\n      writeMode = (!argv.o || argv.o === '') ? 'stdout' : 'file',\n      msgMode = (writeMode === 'file') ? 'stdout' : 'stderr',\n      /**\n       * MSG object\n       * @type {Messenger}\n       */\n      messenger = new Messenger(msgMode, argv.q, argv.m),\n      read = (readMode === 'stdin') ? readFromStdIn : readFromFile,\n      write = (writeMode === 'stdout') ? writeToStdOut : writeToFile,\n      enc = argv.encoding || 'utf8',\n      flavor =  argv.p,\n      append = argv.a || false,\n      options = parseOptions(flavor),\n      converter = new showdown.Converter(options),\n      md, html;\n\n  // Load extensions\n  if (argv.e) {\n    messenger.printMsg('Loading extensions');\n    for (var i = 0; i < argv.e.length; ++i) {\n      try {\n        var ext = require(argv.e[i]);\n        converter.addExtension(ext, argv.e[i]);\n      } catch (e) {\n        messenger.printError('Could not load extension ' + argv.e[i] + '. Reason:');\n        messenger.errorExit(e);\n      }\n    }\n  }\n\n  messenger.printMsg('...');\n  // read the input\n  messenger.printMsg('Reading data from ' + readMode + '...');\n  md = read(enc);\n\n  // process the input\n  messenger.printMsg('Parsing markdown...');\n  html = converter.makeHtml(md);\n\n  // write the output\n  messenger.printMsg('Writing data to ' + writeMode + '...');\n  write(html, append);\n  messenger.okExit();\n\n  function parseOptions (flavor) {\n    var options = {},\n        flavorOpts = showdown.getFlavorOptions(flavor) || {};\n\n    // if flavor is not undefined, let's tell the user we're loading that preset\n    if (flavor) {\n      messenger.printMsg('Loading ' + flavor + ' flavor.');\n    }\n\n    for (var opt in argv) {\n      if (argv.hasOwnProperty(opt)) {\n        // first we load the default options\n        if (showdownOptions.hasOwnProperty(opt) && showdownOptions[opt].default !== null) {\n          options[opt] = showdownOptions[opt].default;\n        }\n\n        // we now override defaults with flavor, if a flavor was indeed passed\n        if (flavorOpts.hasOwnProperty(opt)) {\n          options[opt] = flavorOpts[opt];\n        }\n\n        // lastly we override with explicit passed options\n        // being careful not to pass CLI specific options, such as -v, -h or --extensions\n        if (showdownOptions.hasOwnProperty(opt)) {\n          if (argv[opt] === true) {\n            messenger.printMsg('Enabling option ' + opt);\n            options[opt] = argv[opt];\n          } else if (argv[opt] === false) {\n            options[opt] = argv[opt];\n          }\n        }\n      }\n    }\n    return options;\n  }\n\n  function readFromStdIn () {\n    try {\n      var size = fs.fstatSync(process.stdin.fd).size;\n      return size > 0 ? fs.readSync(process.stdin.fd, size)[0] : '';\n    } catch (e) {\n      var err = new Error('Could not read from stdin, reason: ' + e.message);\n      messenger.errorExit(err);\n    }\n  }\n\n  function readFromFile (encoding) {\n    try {\n      return fs.readFileSync(argv.i, encoding);\n    } catch (err) {\n      messenger.errorExit(err);\n    }\n  }\n\n  function writeToStdOut (html) {\n    return process.stdout.write(html);\n  }\n\n  function writeToFile (html, append) {\n    // If a flag is passed, it means we should append instead of overwriting.\n    // Only works with files, obviously\n    var write = (append) ? fs.appendFileSync : fs.writeFileSync;\n    try {\n      write(argv.o, html);\n    } catch (err) {\n      messenger.errorExit(err);\n    }\n  }\n}\n\nmodule.exports = exports = {\n  run: run\n};\n\n//# sourceMappingURL=makehtml.cmd.js.map\n"],"file":"makehtml.cmd.js"}