{"version":3,"names":[],"mappings":"","sources":["assets/components/easypack/js/showdown/src/subParsers/makehtml/links.js"],"sourcesContent":["////\n// makehtml/links.js\n// Copyright (c) 2018 ShowdownJS\n//\n// Transforms MD links into `<a>` html anchors\n//\n// A link contains link text (the visible text), a link destination (the URI that is the link destination), and\n// optionally a link title. There are two basic kinds of links in Markdown.\n// In inline links the destination and title are given immediately after the link text.\n// In reference links the destination and title are defined elsewhere in the document.\n//\n// ***Author:***\n// - Estevão Soares dos Santos (Tivie) <https://github.com/tivie>\n////\n\n(function () {\n  /**\n   * Helper function: Wrapper function to pass as second replace parameter\n   *\n   * @param {RegExp} rgx\n   * @param {string} evtRootName\n   * @param {{}} options\n   * @param {{}} globals\n   * @returns {Function}\n   */\n  function replaceAnchorTag (rgx, evtRootName, options, globals, emptyCase) {\n    emptyCase = !!emptyCase;\n    return function (wholeMatch, text, id, url, m5, m6, title) {\n      // bail we we find 2 newlines somewhere\n      if (/\\n\\n/.test(wholeMatch)) {\n        return wholeMatch;\n      }\n\n      var evt = createEvent(rgx, evtRootName + '.captureStart', wholeMatch, text, id, url, title, options, globals);\n      return writeAnchorTag(evt, options, globals, emptyCase);\n    };\n  }\n\n  /**\n   * TODO Normalize this\n   * Helper function: Create a capture event\n   * @param {RegExp} rgx\n   * @param {String} evtName Event name\n   * @param {String} wholeMatch\n   * @param {String} text\n   * @param {String} id\n   * @param {String} url\n   * @param {String} title\n   * @param {{}} options\n   * @param {{}} globals\n   * @returns {showdown.helper.Event|*}\n   */\n  function createEvent (rgx, evtName, wholeMatch, text, id, url, title, options, globals) {\n    return globals.converter._dispatch(evtName, wholeMatch, options, globals, {\n      regexp: rgx,\n      matches: {\n        wholeMatch: wholeMatch,\n        text: text,\n        id: id,\n        url: url,\n        title: title\n      }\n    });\n  }\n\n  /**\n   * Helper Function: Normalize and write an anchor tag based on passed parameters\n   * @param evt\n   * @param options\n   * @param globals\n   * @param {boolean} emptyCase\n   * @returns {string}\n   */\n  function writeAnchorTag (evt, options, globals, emptyCase) {\n\n    var wholeMatch = evt.getMatches().wholeMatch;\n    var text = evt.getMatches().text;\n    var id = evt.getMatches().id;\n    var url = evt.getMatches().url;\n    var title = evt.getMatches().title;\n    var target = '';\n\n    if (!title) {\n      title = '';\n    }\n    id = (id) ? id.toLowerCase() : '';\n\n    if (emptyCase) {\n      url = '';\n    } else if (!url) {\n      if (!id) {\n        // lower-case and turn embedded newlines into spaces\n        id = text.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + id;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[id])) {\n        url = globals.gUrls[id];\n        if (!showdown.helper.isUndefined(globals.gTitles[id])) {\n          title = globals.gTitles[id];\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n    //url = showdown.helper.escapeCharacters(url, '*_:~', false); // replaced line to improve performance\n    url = url.replace(showdown.helper.regexes.asteriskDashTildeAndColon, showdown.helper.escapeCharactersCallback);\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n      title = title.replace(showdown.helper.regexes.asteriskDashTildeAndColon, showdown.helper.escapeCharactersCallback);\n      title = ' title=\"' + title + '\"';\n    }\n\n    // optionLinksInNewWindow only applies\n    // to external links. Hash links (#) open in same page\n    if (options.openLinksInNewWindow && !/^#/.test(url)) {\n      // escaped _\n      target = ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\n    }\n\n    // Text can be a markdown element, so we run through the appropriate parsers\n    text = showdown.subParser('makehtml.codeSpans')(text, options, globals);\n    text = showdown.subParser('makehtml.emoji')(text, options, globals);\n    text = showdown.subParser('makehtml.underline')(text, options, globals);\n    text = showdown.subParser('makehtml.italicsAndBold')(text, options, globals);\n    text = showdown.subParser('makehtml.strikethrough')(text, options, globals);\n    text = showdown.subParser('makehtml.ellipsis')(text, options, globals);\n    text = showdown.subParser('makehtml.hashHTMLSpans')(text, options, globals);\n\n    //evt = createEvent(rgx, evtRootName + '.captureEnd', wholeMatch, text, id, url, title, options, globals);\n\n    var result = '<a href=\"' + url + '\"' + title + target + '>' + text + '</a>';\n\n    //evt = createEvent(rgx, evtRootName + '.beforeHash', wholeMatch, text, id, url, title, options, globals);\n\n    result = showdown.subParser('makehtml.hashHTMLSpans')(result, options, globals);\n\n    return result;\n  }\n\n  var evtRootName = 'makehtml.links';\n\n  /**\n   * Turn Markdown link shortcuts into XHTML <a> tags.\n   */\n  showdown.subParser('makehtml.links', function (text, options, globals) {\n\n    text = globals.converter._dispatch(evtRootName + '.start', text, options, globals).getText();\n\n    // 1. Handle reference-style links: [link text] [id]\n    text = showdown.subParser('makehtml.links.reference')(text, options, globals);\n\n    // 2. Handle inline-style links: [link text](url \"optional title\")\n    text = showdown.subParser('makehtml.links.inline')(text, options, globals);\n\n    // 3. Handle reference-style shortcuts: [link text]\n    // These must come last in case there's a [link text][1] or [link text](/foo)\n    text = showdown.subParser('makehtml.links.referenceShortcut')(text, options, globals);\n\n    // 4. Handle angle brackets links -> `<http://example.com/>`\n    // Must come after links, because you can use < and > delimiters in inline links like [this](<url>).\n    text = showdown.subParser('makehtml.links.angleBrackets')(text, options, globals);\n\n    // 5. Handle GithubMentions (if option is enabled)\n    text = showdown.subParser('makehtml.links.ghMentions')(text, options, globals);\n\n    // 6. Handle <a> tags and img tags\n    text = text.replace(/<a\\s[^>]*>[\\s\\S]*<\\/a>/g, function (wholeMatch) {\n      return showdown.helper._hashHTMLSpan(wholeMatch, globals);\n    });\n\n    text = text.replace(/<img\\s[^>]*\\/?>/g, function (wholeMatch) {\n      return showdown.helper._hashHTMLSpan(wholeMatch, globals);\n    });\n\n    // 7. Handle naked links (if option is enabled)\n    text = showdown.subParser('makehtml.links.naked')(text, options, globals);\n\n    text = globals.converter._dispatch(evtRootName + '.end', text, options, globals).getText();\n    return text;\n  });\n\n  /**\n   * TODO WRITE THIS DOCUMENTATION\n   */\n  showdown.subParser('makehtml.links.inline', function (text, options, globals) {\n    var evtRootName = evtRootName + '.inline';\n\n    text = globals.converter._dispatch(evtRootName + '.start', text, options, globals).getText();\n\n    // 1. Look for empty cases: []() and [empty]() and [](\"title\")\n    var rgxEmpty = /\\[(.*?)]()()()()\\(<? ?>? ?(?:[\"'](.*)[\"'])?\\)/g;\n    text = text.replace(rgxEmpty, replaceAnchorTag(rgxEmpty, evtRootName, options, globals, true));\n\n    // 2. Look for cases with crazy urls like ./image/cat1).png\n    var rgxCrazy = /\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()\\s?\\([ \\t]?<([^>]*)>(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g;\n    text = text.replace(rgxCrazy, replaceAnchorTag(rgxCrazy, evtRootName, options, globals));\n\n    // 3. inline links with no title or titles wrapped in ' or \":\n    // [text](url.com) || [text](<url.com>) || [text](url.com \"title\") || [text](<url.com> \"title\")\n    //var rgx2 = /\\[[ ]*[\\s]?[ ]*([^\\n\\[\\]]*?)[ ]*[\\s]?[ ]*] ?()\\(<?[ ]*[\\s]?[ ]*([^\\s'\"]*)>?(?:[ ]*[\\n]?[ ]*()(['\"])(.*?)\\5)?[ ]*[\\s]?[ ]*\\)/; // this regex is too slow!!!\n    var rgx2 = /\\[([\\S ]*?)]\\s?()\\( *<?([^\\s'\"]*?(?:\\([\\S]*?\\)[\\S]*?)?)>?\\s*(?:()(['\"])(.*?)\\5)? *\\)/g;\n    text = text.replace(rgx2, replaceAnchorTag(rgx2, evtRootName, options, globals));\n\n    // 4. inline links with titles wrapped in (): [foo](bar.com (title))\n    var rgx3 = /\\[([\\S ]*?)]\\s?()\\( *<?([^\\s'\"]*?(?:\\([\\S]*?\\)[\\S]*?)?)>?\\s+()()\\((.*?)\\) *\\)/g;\n    text = text.replace(rgx3, replaceAnchorTag(rgx3, evtRootName, options, globals));\n\n    text = globals.converter._dispatch(evtRootName + '.end', text, options, globals).getText();\n\n    return text;\n  });\n\n  /**\n   * TODO WRITE THIS DOCUMENTATION\n   */\n  showdown.subParser('makehtml.links.reference', function (text, options, globals) {\n    var evtRootName = evtRootName + '.reference';\n\n    text = globals.converter._dispatch(evtRootName + '.start', text, options, globals).getText();\n\n    var rgx = /\\[((?:\\[[^\\]]*]|[^\\[\\]])*)] ?(?:\\n *)?\\[(.*?)]()()()()/g;\n    text = text.replace(rgx, replaceAnchorTag(rgx, evtRootName, options, globals));\n\n    text = globals.converter._dispatch(evtRootName + '.end', text, options, globals).getText();\n\n    return text;\n  });\n\n  /**\n   * TODO WRITE THIS DOCUMENTATION\n   */\n  showdown.subParser('makehtml.links.referenceShortcut', function (text, options, globals) {\n    var evtRootName = evtRootName + '.referenceShortcut';\n\n    text = globals.converter._dispatch(evtRootName + '.start', text, options, globals).getText();\n\n    var rgx = /\\[([^\\[\\]]+)]()()()()()/g;\n    text = text.replace(rgx, replaceAnchorTag(rgx, evtRootName, options, globals));\n\n    text = globals.converter._dispatch(evtRootName + '.end', text, options, globals).getText();\n\n    return text;\n  });\n\n  /**\n   * TODO WRITE THIS DOCUMENTATION\n   */\n  showdown.subParser('makehtml.links.ghMentions', function (text, options, globals) {\n    var evtRootName = evtRootName + 'ghMentions';\n\n    if (!options.ghMentions) {\n      return text;\n    }\n\n    text = globals.converter._dispatch(evtRootName + '.start', text, options, globals).getText();\n\n    var rgx = /(^|\\s)(\\\\)?(@([a-z\\d]+(?:[a-z\\d._-]+?[a-z\\d]+)*))/gi;\n\n    text = text.replace(rgx, function (wholeMatch, st, escape, mentions, username) {\n      // bail if the mentions was escaped\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n\n      // check if options.ghMentionsLink is a string\n      // TODO Validation should be done at initialization not at runtime\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\n        throw new Error('ghMentionsLink option must be a string');\n      }\n      var url = options.ghMentionsLink.replace(/{u}/g, username);\n      var evt = createEvent(rgx, evtRootName + '.captureStart', wholeMatch, mentions, null, url, null, options, globals);\n      // captureEnd Event is triggered inside writeAnchorTag function\n      return st + writeAnchorTag(evt, options, globals);\n    });\n\n    text = globals.converter._dispatch(evtRootName + '.end', text, options, globals).getText();\n\n    return text;\n  });\n\n  /**\n   * TODO WRITE THIS DOCUMENTATION\n   */\n  showdown.subParser('makehtml.links.angleBrackets', function (text, options, globals) {\n    var evtRootName = 'makehtml.links.angleBrackets';\n\n    text = globals.converter._dispatch(evtRootName + '.start', text, options, globals).getText();\n\n    // 1. Parse links first\n    var urlRgx  = /<(((?:https?|ftp):\\/\\/|www\\.)[^'\">\\s]+)>/gi;\n    text = text.replace(urlRgx, function (wholeMatch, url, urlStart) {\n      var text = url;\n      url = (urlStart === 'www.') ? 'http://' + url : url;\n      var evt = createEvent(urlRgx, evtRootName + '.captureStart', wholeMatch, text, null, url, null, options, globals);\n      return writeAnchorTag(evt, options, globals);\n    });\n\n    // 2. Then Mail Addresses\n    var mailRgx = /<(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi;\n    text = text.replace(mailRgx, function (wholeMatch, mail) {\n      var url = 'mailto:';\n      mail = showdown.subParser('makehtml.unescapeSpecialChars')(mail, options, globals);\n      if (options.encodeEmails) {\n        url = showdown.helper.encodeEmailAddress(url + mail);\n        mail = showdown.helper.encodeEmailAddress(mail);\n      } else {\n        url = url + mail;\n      }\n      var evt = createEvent(mailRgx, evtRootName + '.captureStart', wholeMatch, mail, null, url, null, options, globals);\n      return writeAnchorTag(evt, options, globals);\n    });\n\n    text = globals.converter._dispatch(evtRootName + '.end', text, options, globals).getText();\n    return text;\n  });\n\n  /**\n   * TODO MAKE THIS WORK (IT'S NOT ACTIVATED)\n   * TODO WRITE THIS DOCUMENTATION\n   */\n  showdown.subParser('makehtml.links.naked', function (text, options, globals) {\n    if (!options.simplifiedAutoLink) {\n      return text;\n    }\n\n    var evtRootName = 'makehtml.links.naked';\n\n    text = globals.converter._dispatch(evtRootName + '.start', text, options, globals).getText();\n\n    // 2. Now we check for\n    // we also include leading markdown magic chars [_*~] for cases like __https://www.google.com/foobar__\n    var urlRgx = /([_*~]*?)(((?:https?|ftp):\\/\\/|www\\.)[^\\s<>\"'`´.-][^\\s<>\"'`´]*?\\.[a-z\\d.]+[^\\s<>\"']*)\\1/gi;\n    text = text.replace(urlRgx, function (wholeMatch, leadingMDChars, url, urlPrefix) {\n\n      // we now will start traversing the url from the front to back, looking for punctuation chars [_*~,;:.!?\\)\\]]\n      var len = url.length;\n      var suffix = '';\n      for (var i = len - 1; i >= 0; --i) {\n        var char = url.charAt(i);\n\n        if (/[_*~,;:.!?]/.test(char)) {\n          // it's a punctuation char\n          // we remove it from the url\n          url = url.slice(0, -1);\n          // and prepend it to the suffix\n          suffix = char + suffix;\n        } else if (/\\)/.test(char)) {\n          var opPar = url.match(/\\(/g) || [];\n          var clPar = url.match(/\\)/g);\n\n          // it's a curved parenthesis so we need to check for \"balance\" (kinda)\n          if (opPar.length < clPar.length) {\n            // there are more closing Parenthesis than opening so chop it!!!!!\n            url = url.slice(0, -1);\n            // and prepend it to the suffix\n            suffix = char + suffix;\n          } else {\n            // it's (kinda) balanced so our work is done\n            break;\n          }\n        } else if (/]/.test(char)) {\n          var opPar2 = url.match(/\\[/g) || [];\n          var clPar2 = url.match(/\\]/g);\n          // it's a squared parenthesis so we need to check for \"balance\" (kinda)\n          if (opPar2.length < clPar2.length) {\n            // there are more closing Parenthesis than opening so chop it!!!!!\n            url = url.slice(0, -1);\n            // and prepend it to the suffix\n            suffix = char + suffix;\n          } else {\n            // it's (kinda) balanced so our work is done\n            break;\n          }\n        } else {\n          // it's not a punctuation or a parenthesis so our work is done\n          break;\n        }\n      }\n\n      // we copy the treated url to the text variable\n      var text = url;\n      // finally, if it's a www shortcut, we prepend http\n      url = (urlPrefix === 'www.') ? 'http://' + url : url;\n\n      // url part is done so let's take care of text now\n      // we need to escape the text (because of links such as www.example.com/foo__bar__baz)\n      text = text.replace(showdown.helper.regexes.asteriskDashTildeAndColon, showdown.helper.escapeCharactersCallback);\n\n      // finally we dispatch the event\n      var evt = createEvent(urlRgx, evtRootName + '.captureStart', wholeMatch, text, null, url, null, options, globals);\n\n      // and return the link tag, with the leadingMDChars and  suffix. The leadingMDChars are added at the end too because\n      // we consumed those characters in the regexp\n      return leadingMDChars + writeAnchorTag(evt, options, globals) + suffix + leadingMDChars;\n    });\n\n    // 2. Then mails\n    var mailRgx = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi;\n    text = text.replace(mailRgx, function (wholeMatch, leadingChar, mail) {\n      var url = 'mailto:';\n      mail = showdown.subParser('makehtml.unescapeSpecialChars')(mail, options, globals);\n      if (options.encodeEmails) {\n        url = showdown.helper.encodeEmailAddress(url + mail);\n        mail = showdown.helper.encodeEmailAddress(mail);\n      } else {\n        url = url + mail;\n      }\n      var evt = createEvent(mailRgx, evtRootName + '.captureStart', wholeMatch, mail, null, url, null, options, globals);\n      return leadingChar + writeAnchorTag(evt, options, globals);\n    });\n\n\n    text = globals.converter._dispatch(evtRootName + '.end', text, options, globals).getText();\n    return text;\n  });\n})();\n\n//# sourceMappingURL=links.js.map\n"],"file":"links.js"}