{"version":3,"names":[],"mappings":"","sources":["assets/components/easypack/js/showdown/src/subParsers/makehtml/hashHTMLSpans.js"],"sourcesContent":["/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('makehtml.hashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('makehtml.hashHTMLSpans.before', text, options, globals).getText();\n\n  // Hash Self Closing tags\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n    return showdown.helper._hashHTMLSpan(wm, globals);\n  });\n\n  // Hash tags without properties\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return showdown.helper._hashHTMLSpan(wm, globals);\n  });\n\n  // Hash tags with properties\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return showdown.helper._hashHTMLSpan(wm, globals);\n  });\n\n  // Hash self closing tags without />\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\n    return showdown.helper._hashHTMLSpan(wm, globals);\n  });\n\n  text = globals.converter._dispatch('makehtml.hashHTMLSpans.after', text, options, globals).getText();\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('makehtml.unhashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('makehtml.unhashHTMLSpans.before', text, options, globals).getText();\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    var repText = globals.gHtmlSpans[i],\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\n        limit = 0;\n\n    while (/¨C(\\d+)C/.test(repText)) {\n      var num = RegExp.$1;\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n      if (limit === 10) {\n        console.error('maximum nesting of 10 spans reached!!!');\n        break;\n      }\n      ++limit;\n    }\n    text = text.replace('¨C' + i + 'C', repText);\n  }\n\n  text = globals.converter._dispatch('makehtml.unhashHTMLSpans.after', text, options, globals).getText();\n  return text;\n});\n\n\n"],"file":"hashHTMLSpans.js"}