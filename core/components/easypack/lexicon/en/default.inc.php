<?php
	# generated by EasyPack
	/** @var array $_lang */
	$_lang = array_merge(
		array (
  'EasyPack' => 'Packer <i class="fad fa-box"></i>',
  'EasyPack.Deselect_All' => 'Cancel All',
  'EasyPack.Package' => 'Package',
  'EasyPack.Packages' => 'Packages',
  'EasyPack.Select_All' => 'Select All',
  'EasyPack.assets' => 'Path to assets',
  'EasyPack.build' => 'Build Package',
  'EasyPack.changelog' => 'Changelog',
  'EasyPack.compare.Eq' => '<span class="one"> [[+one]] </span> <span class="sign" style="font-family: \'Fira Code\'">==</span> <span class ="two"> [[+two]] </span>',
  'EasyPack.compare.h' => '<span class="one"> [[+one]] </span> <span class="sign" style="font-family: \'Fira Code\'"> <</span> <span class ="two"> [[+two]] </span>',
  'EasyPack.compare.l' => '<span class="one"> [[+one]] </span> <span class="sign" style="font-family: \'Fira Code\'">> </span> <span class ="two"> [[+two]] </span>',
  'EasyPack.compare.notEq' => '<span class="one"> [[+one]] </span> <span class="sign" style="font-family: \'Fira Code\'">!=</span> <span class ="two"> [[+two]] </span>',
  'EasyPack.core' => 'Path to core',
  'EasyPack.create' => 'Create',
  'EasyPack.create_new_pack' => 'Create New Package',
  'EasyPack.create_new_package' => 'Create New Package',
  'EasyPack.create_structure' => 'Create Structure',
  'EasyPack.description.assets' => 'Path to assets from MODX_BASE_PATH, if default paths leave empty',
  'EasyPack.description.changelog' => 'Path to changelog file',
  'EasyPack.description.chunks' => 'Array of Chunks',
  'EasyPack.description.core' => 'Path to core from MODX_BASE_PATH, if default paths leave empty',
  'EasyPack.description.date' => 'Last updated time',
  'EasyPack.description.license' => 'Path to the license file, you can use the same license for all your components',
  'EasyPack.description.menus' => 'Array of menu items',
  'EasyPack.description.modUtilitiesRest' => 'select rest`s for import, modUtilities component will be automatically added to the dependency',
  'EasyPack.description.php_resolver' => 'Path to php file that will be executed after component installation',
  'EasyPack.description.plugins' => 'Plugin Array',
  'EasyPack.description.readme' => 'Path to Readme File',
  'EasyPack.description.requires' => 'Dependencies in json format',
  'EasyPack.description.settings' => 'Array of Settings',
  'EasyPack.description.setup_option' => 'Path to php file that will be executed before installing the component',
  'EasyPack.description.snippets' => 'Array of snippets',
  'EasyPack.description.tables' => 'Array of tables for your component, default database',
  'EasyPack.description.templates' => 'Array of Templates',
  'EasyPack.description.version' => 'version in format: 0.0.0-pl',
  'EasyPack.getResolver' => 'get prepared resolver',
  'EasyPack.install' => 'Install',
  'EasyPack.license' => 'License',
  'EasyPack.modUtilitiesRest' => 'Rest (modUtilities)',
  'EasyPack.path_to_last_transport' => 'Link to latest package',
  'EasyPack.php_resolver' => 'path to php_resolver file',
  'EasyPack.prefix' => 'Table Prefix',
  'EasyPack.readme' => 'Readme',
  'EasyPack.requires' => 'Dependencies',
  'EasyPack.select' => 'Select',
  'EasyPack.setup_option' => 'path to setup_option file',
  'EasyPack.tables' => 'Tables',
  'EasyPack.test' => 'Test Package',
  'EasyPack.testing' => 'Test result [[+ name]]',
  '_ controllers_mgr_' => 'create a <strong style="color: black;"> / controllers / mgr </strong> folder in core / components / [[+ name]] /?',
  '_ docs_' => 'create a folder <strong style="color: black;"> / docs / </strong> in core / components / [[+ name]] /?',
  '_ elements_' => 'Save elements (plugins, chunks, snippets, ...) to the <strong style="color: black;"> / elements / </strong> folder in assets / components / [[+ name]] /? (automatically launched when the package is created) ',
  '_ elements_chunks_' => 'create a folder <strong style="color: black;"> / elements / chunks </strong> in core / components / [[+ name]] /?',
  '_ elements_plugins_' => 'create a folder <strong style="color: black;"> / elements / plugins </strong> in core / components / [[+ name]] /?',
  '_ elements_snippets_' => 'create <strong style="color: black;"> / elements / snippets </strong> folder in core / components / [[+ name]] /?',
  '_ elements_templates_' => 'create a <strong style="color: black;"> / elements / templates </strong> folder in core / components / [[+ name]] /?',
  '_ js_mgr_' => 'create folder <strong style="color: black;"> / js / mgr </strong> in assets / components / [[+ name]] /?',
  '_ lexicon_en_' => 'create folder <strong style="color: black;"> / lexicon / en </strong> in assets / components / [[+ name]] /?',
  '_ model_' => 'create xml table schemas and their classes? (automatically launched when the package is created) ',
  '_ namespace_' => 'create a namespace for <strong style="color: black;"> [[+ name]] </strong>? (automatically launched when the package is created) ',
  '_ processors_' => 'create folder <strong style="color: black;"> / processors / </strong> in assets / components / [[+ name]] /?',
  'easypack' => 'Packer <i class="fad fa-box"></i>',
  'easypack_title' => 'Packer',
  'import_from_category' => 'Import Chunks, Snipets, Plugins from category <strong style="color: black;">[[+name]]</strong>?',
)
		, $_lang);
	